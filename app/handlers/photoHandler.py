from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from app.settings import bot
from app.services.GoogleOCR import drive_ocr
from app.services.QwenOCR import qwenOCR

import logging


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

imageRouter = Router(name="Images")

def get_check_buttons():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="confirm_check"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data="deny_check")
        ]
    ])

@imageRouter.message(F.photo)
async def message(msg: Message):

    photo = msg.photo[-1]
    file = await bot.download(photo)
    photo_bytes = file.read()

    user_data[msg.from_user.id] = {
        "photo_bytes": photo_bytes,
        "chat_id": msg.chat.id,
        "msg": msg
    }

    await msg.reply(
        "–ù—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞?\n" \
        "–û–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ç.–ø.)",
        reply_markup=get_check_buttons()
    )


@imageRouter.callback_query(F.data.endswith("_check"))
async def process_confirm_check(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = user_data.get(user_id)
    
    if not data:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.")
        return
    
    await callback.message.edit_reply_markup()
    
    try:
        await bot.set_message_reaction(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reaction=[{"type": "emoji", "emoji": "üëÄ"}]
        )
    except Exception as e:
        logging.error()

    text=""
    
    try:
        text = await drive_ocr.process_image(data["photo_bytes"])
    except Exception as e:
        logging.error(e)

    if callback.data == "confirm_check":
        try:
            await bot.set_message_reaction(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                reaction=[{"type": "emoji", "emoji": "üíÖ"}]
            )
        except Exception as e:
            logging.error(e)
        text = qwenOCR.process_image(data["photo_bytes"], text)
    
    await data["msg"].reply(text)
    await callback.message.delete()
